@startuml

class Enemy {
    - configManager: ConfigManager
    - name: string
    - enemyBullet: vector<Bullet*>
    - health: int
    - damage: int
    - speed: double
    - alive: bool
    - posiX: double
    - posiY: int
    - score: int
    + Enemy()
    + Enemy(string, int, int, double, double, double, int, bool)
    + Enemy(Enemy&)
    + ~Enemy()
    + attack(Fighter&) const
    + limitNameLength(int)
    + move()
    + defeat()
    + saveConfig()
    + loadConfig(string)
    + shootBullet(double, double, bool)
    + set_name(string)
    + get_name(): string
    + set_positionX(double)
    + set_positionY(double)
    + get_positionX(): double
    + get_positionY(): double
    + set_health(int)
    + get_health(): int
    + set_damage(int)
    + get_damage(): int
    + set_speed(double)
    + get_speed(): double
    + setIsAlive(bool)
    + isAlive(): bool
    + get_score(): int
}

struct SpecialAbilities {
    - skillInterval: int
    - skillDuration: int
}

class Boss {
    - skill: SpecialAbilities
    - SKILL_INTERVAL: const int
    - SKILL_DURATION: const int
    - skillActive: bool
    + Boss()
    + Boss(string, int, int, double, int, int, int, bool, SpecialAbilities&)
    + Boss(copyBoss: Boss&)
    + activateSkills()
    + operator=(otherBoss: Boss&): Boss&
}

class MiniBoss {
    + MiniBoss()
    + MiniBoss(string, int, int, double, int, int, int, bool)
    + MiniBoss(copyMiniBoss: MiniBoss&)
}

Enemy <|-- Boss
Boss <|-- MiniBoss
Boss *-- SpecialAbilities
Enemy *-- ConfigManager
Enemy *-- Bullet
Enemy --o Fighter
@enduml