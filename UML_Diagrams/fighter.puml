@startuml

class SpaceShip {
  -name: string
  -health: int
  -speed: double
  -damage: int
  -alive: bool
  -posiX: double
  -posiY: double
  #<<enumeration>> BulletType{NORMAL, LASER, MISSILE}
  #MAX_SPEED: const static double
  #currentBullet: BulletType
  +SpaceShip()
  +SpaceShip(const string, int, double, int, double, double, bool)
  +SpaceShip(const SpaceShip&)
  +virtual ~SpaceShip()
  +virtual move() = 0
  +virtual attack(EnemyWave&) = 0
  +virtual saveConfig() = 0
  +virtual loadConfig(const string&) = 0
  +set_name(const std::string)
  +get_name(): std::string
  +set_positionX(double)
  +set_positionY(double)
  +get_positionX(): double
  +get_positionY(): double
  +set_health(int)
  +get_health(): int
  +set_speed(double)
  +get_speed(): double
  +set_atk(int)
  +get_atk(): int
  +setIsAlive(bool)
  +isAlive(): bool
}

class SpaceShipII {
  +SpaceShipII()
  +SpaceShipII(const string, int, double, int, double, double, bool)
  +SpaceShipII(const SpaceShipII&)
  +virtual ~SpaceShipII()
  +virtual evade() = 0
  +virtual shield() = 0
}

class Fighter {
  -configManager: ConfigManager
  -powerUps: std::vector<PowerUp>
  -playerScore: map<string, int>
  -data: Data
  -score: int
  #fighterBullet: vector<Bullet*>
  +Fighter()
  +Fighter(const std::string, int, double, int, double, double, bool)
  +Fighter(const Fighter&)
  +~Fighter()
  +move() override
  +defeat()
  +specialAbility()
  +attack(EnemyWave&) override
  +calculatePlayerScore(const Enemy&)
  +addPowerUp(const string&, int)
  +shootBullet(double, double, bool)
  +update()
  +saveConfig() override
  +loadConfig(const string&) override
  +evade() override
  +shield() override
  +getUserData(): Data
  +printUserData() const
  +get_score(string): int
  +getPlayerScore(): map<string, int>
  +getBullet(): vector<Bullet*>
}


class Interceptor {
  -laserCount: int
  +Interceptor()
  +Interceptor(const string, int, double, int, double, double, bool)
  +Interceptor(const Interceptor&)
  +shootBullet(double, double, bool) override
  +evade() override
  +shield() override
  +laser()
}


class Destroyer {
  -missileCount: int
  +Destroyer()
  +Destroyer(const string, int, double, int, double, double, bool)
  +Destroyer(const Destroyer&)
  +shootBullet(double, double, bool) override
  +evade() override
  +shield() override
  +missile()
}

SpaceShip <|-- SpaceShipII
SpaceShipII <|-- Fighter
Fighter <|-- Interceptor
Interceptor <|-- Destroyer
@enduml
